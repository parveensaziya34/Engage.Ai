import sqlite3
from groq import Groq

client = Groq(api_key="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")
database = sqlite3.connect("new_database.db")
cursor = database.cursor()

sql_assistant_prompt = (
    "You are an intelligent SQL assistant who can generate SQL queries from natural language. "
    "Ignore case differences and generalize wordings like 'high income', 'income category is high', etc. "
    " the table name is 'new_table' in 'new_database.db'. "
    "Only return the SQL query without any explanation."
    "Ignore the uppercase or lowercase."
    "i am giving you dictionary having keys as column name and values are the distinct values of that column"
    "{'Loan_status' :['PAIDOFF','COLLECTION','COLLECTION_PAIDOFF'],'education' : ['High School or Below','Bechalor','college','Master or Above'],'Gender' : ['Female','Male']}"
    "other than above the remaining columns are - Principal , terms , age , Loan_ID , effective_date , due_date , paid_off_time , past_due_days"
)

nl_response_prompt = (
    "You are an assistant that can turn raw SQL query results into clear, conversational English for non-technical users. "
)
'''
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
print(cursor.fetchall())
# Retrieve column info for new_table
cursor.execute("PRAGMA table_info('new_table');")
schema_info = cursor.fetchall()  # e.g., [(0, 'id', 'INTEGER',...), (1, 'loan_status', 'TEXT',...)]
print(schema_info)
'''
# get question from user
def get_question():
    global latest_question
    while True:
        question = input("Ask your question: ")
        if question.lower() in ["exit", "end", "quit"]:
            break
        latest_question= question
        get_sql_query(question)

# convert nl to sql query
def get_sql_query(nL_query):
    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": sql_assistant_prompt},
                {"role": "user", "content": nL_query}
            ],
            max_tokens=150,
            temperature=0.2
        )
        sql_query = response.choices[0].message.content.strip()
        #print("\nGenerated SQL Query:", sql_query)
        processing(sql_query)

    except Exception as e:
        print("Error during SQL generation:", str(e))

# fetch data from database
def processing(squery):
    try:
        cursor.execute(squery)
        sql_output = cursor.fetchone()

        if sql_output is None:
            print("No data found.")
            return

        # Convert tuple to a clean string (e.g., (5,) -> "5")
        result_str = ", ".join(map(str, sql_output))
        print("SQL Result:", result_str)
        get_nl_response(latest_question,result_str)

    except Exception as e:
        print("SQL execution error:", str(e))

# convert sql output to natural language
def get_nl_response(nl_question, sql_output_str):
    try:
        prompt = (
            f"You are an assistant that helps users understand SQL output in plain English.\n"
            f"Question: {nl_question}\n"
            f"SQL Result: {sql_output_str}\n"
            f"Respond in a conversational, user-friendly way explaining the result based on the question."
        )
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": nl_response_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.2
        )
        nl_response = response.choices[0].message.content.strip()
        nl_output(nl_response)

    except Exception as e:
        print("Error during NL response:", str(e))


# show nl output
def nl_output(nl_response):
    print("Natural Language Response:", nl_response)

# start the process
get_question()
